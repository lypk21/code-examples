{"remainingRequest":"/Users/liuyingping/Desktop/www/vue/shopping/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/liuyingping/Desktop/www/vue/shopping/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/liuyingping/Desktop/www/vue/shopping/node_modules/cube-ui/src/components/bubble/bubble.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/liuyingping/Desktop/www/vue/shopping/node_modules/cube-ui/src/components/bubble/bubble.vue","mtime":499162500000},{"path":"/Users/liuyingping/Desktop/www/vue/shopping/node_modules/cache-loader/dist/cjs.js","mtime":1578012874466},{"path":"/Users/liuyingping/Desktop/www/vue/shopping/node_modules/babel-loader/lib/index.js","mtime":1529635966000},{"path":"/Users/liuyingping/Desktop/www/vue/shopping/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.fill\";\nimport \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\nexport default {\n  props: {\n    y: {\n      type: Number,\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      width: 50,\n      height: 80\n    };\n  },\n  computed: {\n    distance: function distance() {\n      return Math.max(0, Math.min(this.y * this.ratio, this.maxDistance));\n    },\n    style: function style() {\n      return \"width:\".concat(this.width / this.ratio, \"px;height:\").concat(this.height / this.ratio, \"px\");\n    }\n  },\n  mounted: function mounted() {\n    this.ratio = window.devicePixelRatio;\n    this.width *= this.ratio;\n    this.height *= this.ratio;\n    this.initRadius = 18 * this.ratio;\n    this.minHeadRadius = 12 * this.ratio;\n    this.minTailRadius = 5 * this.ratio;\n    this.initArrowRadius = 10 * this.ratio;\n    this.minArrowRadius = 6 * this.ratio;\n    this.arrowWidth = 3 * this.ratio;\n    this.maxDistance = 40 * this.ratio;\n    this.initCenterX = 25 * this.ratio;\n    this.initCenterY = 25 * this.ratio;\n    this.headCenter = {\n      x: this.initCenterX,\n      y: this.initCenterY\n    };\n\n    this._draw();\n  },\n  methods: {\n    _draw: function _draw() {\n      var bubble = this.$refs.bubble;\n      var ctx = bubble.getContext('2d');\n      ctx.clearRect(0, 0, bubble.width, bubble.height);\n\n      this._drawBubble(ctx);\n\n      this._drawArrow(ctx);\n    },\n    _drawBubble: function _drawBubble(ctx) {\n      ctx.save();\n      ctx.beginPath();\n      var rate = this.distance / this.maxDistance;\n      var headRadius = this.initRadius - (this.initRadius - this.minHeadRadius) * rate;\n      this.headCenter.y = this.initCenterY - (this.initRadius - this.minHeadRadius) * rate; // upper semicircle\n\n      ctx.arc(this.headCenter.x, this.headCenter.y, headRadius, 0, Math.PI, true); // left bessel\n\n      var tailRadius = this.initRadius - (this.initRadius - this.minTailRadius) * rate;\n      var tailCenter = {\n        x: this.headCenter.x,\n        y: this.headCenter.y + this.distance\n      };\n      var tailPointL = {\n        x: tailCenter.x - tailRadius,\n        y: tailCenter.y\n      };\n      var controlPointL = {\n        x: tailPointL.x,\n        y: tailPointL.y - this.distance / 2\n      };\n      ctx.quadraticCurveTo(controlPointL.x, controlPointL.y, tailPointL.x, tailPointL.y); // lower semicircle\n\n      ctx.arc(tailCenter.x, tailCenter.y, tailRadius, Math.PI, 0, true); // right bessel\n\n      var headPointR = {\n        x: this.headCenter.x + headRadius,\n        y: this.headCenter.y\n      };\n      var controlPointR = {\n        x: tailCenter.x + tailRadius,\n        y: headPointR.y + this.distance / 2\n      };\n      ctx.quadraticCurveTo(controlPointR.x, controlPointR.y, headPointR.x, headPointR.y);\n      ctx.fillStyle = 'rgb(170,170,170)';\n      ctx.fill();\n      ctx.strokeStyle = 'rgb(153,153,153)';\n      ctx.stroke();\n      ctx.restore();\n    },\n    _drawArrow: function _drawArrow(ctx) {\n      ctx.save();\n      ctx.beginPath();\n      var rate = this.distance / this.maxDistance;\n      var arrowRadius = this.initArrowRadius - (this.initArrowRadius - this.minArrowRadius) * rate; // inner circle\n\n      ctx.arc(this.headCenter.x, this.headCenter.y, arrowRadius - (this.arrowWidth - rate), -Math.PI / 2, 0, true); // outer circle\n\n      ctx.arc(this.headCenter.x, this.headCenter.y, arrowRadius, 0, Math.PI * 3 / 2, false);\n      ctx.lineTo(this.headCenter.x, this.headCenter.y - arrowRadius - this.arrowWidth / 2 + rate);\n      ctx.lineTo(this.headCenter.x + this.arrowWidth * 2 - rate * 2, this.headCenter.y - arrowRadius + this.arrowWidth / 2);\n      ctx.lineTo(this.headCenter.x, this.headCenter.y - arrowRadius + this.arrowWidth * 3 / 2 - rate);\n      ctx.fillStyle = 'rgb(255,255,255)';\n      ctx.fill();\n      ctx.strokeStyle = 'rgb(170,170,170)';\n      ctx.stroke();\n      ctx.restore();\n    }\n  },\n  watch: {\n    y: function y() {\n      this._draw();\n    }\n  }\n};",{"version":3,"sources":["bubble.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <canvas ref=\"bubble\" :width=\"width\" :height=\"height\" :style=\"style\"></canvas>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  export default {\n    props: {\n      y: {\n        type: Number,\n        default: 0\n      }\n    },\n    data() {\n      return {\n        width: 50,\n        height: 80\n      }\n    },\n    computed: {\n      distance() {\n        return Math.max(0, Math.min(this.y * this.ratio, this.maxDistance))\n      },\n      style() {\n        return `width:${this.width / this.ratio}px;height:${this.height / this.ratio}px`\n      }\n    },\n    mounted() {\n      this.ratio = window.devicePixelRatio\n      this.width *= this.ratio\n      this.height *= this.ratio\n      this.initRadius = 18 * this.ratio\n      this.minHeadRadius = 12 * this.ratio\n      this.minTailRadius = 5 * this.ratio\n      this.initArrowRadius = 10 * this.ratio\n      this.minArrowRadius = 6 * this.ratio\n      this.arrowWidth = 3 * this.ratio\n      this.maxDistance = 40 * this.ratio\n      this.initCenterX = 25 * this.ratio\n      this.initCenterY = 25 * this.ratio\n      this.headCenter = {\n        x: this.initCenterX,\n        y: this.initCenterY\n      }\n      this._draw()\n    },\n    methods: {\n      _draw() {\n        const bubble = this.$refs.bubble\n        let ctx = bubble.getContext('2d')\n        ctx.clearRect(0, 0, bubble.width, bubble.height)\n\n        this._drawBubble(ctx)\n\n        this._drawArrow(ctx)\n      },\n      _drawBubble(ctx) {\n        ctx.save()\n        ctx.beginPath()\n\n        const rate = this.distance / this.maxDistance\n        const headRadius = this.initRadius - (this.initRadius - this.minHeadRadius) * rate\n\n        this.headCenter.y = this.initCenterY - (this.initRadius - this.minHeadRadius) * rate\n\n        // upper semicircle\n        ctx.arc(this.headCenter.x, this.headCenter.y, headRadius, 0, Math.PI, true)\n\n        // left bessel\n        const tailRadius = this.initRadius - (this.initRadius - this.minTailRadius) * rate\n        const tailCenter = {\n          x: this.headCenter.x,\n          y: this.headCenter.y + this.distance\n        }\n\n        const tailPointL = {\n          x: tailCenter.x - tailRadius,\n          y: tailCenter.y\n        }\n        const controlPointL = {\n          x: tailPointL.x,\n          y: tailPointL.y - this.distance / 2\n        }\n\n        ctx.quadraticCurveTo(controlPointL.x, controlPointL.y, tailPointL.x, tailPointL.y)\n\n        // lower semicircle\n        ctx.arc(tailCenter.x, tailCenter.y, tailRadius, Math.PI, 0, true)\n\n        // right bessel\n        const headPointR = {\n          x: this.headCenter.x + headRadius,\n          y: this.headCenter.y\n        }\n        const controlPointR = {\n          x: tailCenter.x + tailRadius,\n          y: headPointR.y + this.distance / 2\n        }\n        ctx.quadraticCurveTo(controlPointR.x, controlPointR.y, headPointR.x, headPointR.y)\n\n        ctx.fillStyle = 'rgb(170,170,170)'\n        ctx.fill()\n        ctx.strokeStyle = 'rgb(153,153,153)'\n        ctx.stroke()\n        ctx.restore()\n      },\n      _drawArrow(ctx) {\n        ctx.save()\n        ctx.beginPath()\n\n        const rate = this.distance / this.maxDistance\n        const arrowRadius = this.initArrowRadius - (this.initArrowRadius - this.minArrowRadius) * rate\n\n        // inner circle\n        ctx.arc(this.headCenter.x, this.headCenter.y, arrowRadius - (this.arrowWidth - rate), -Math.PI / 2, 0, true)\n\n        // outer circle\n        ctx.arc(this.headCenter.x, this.headCenter.y, arrowRadius, 0, Math.PI * 3 / 2, false)\n\n        ctx.lineTo(this.headCenter.x, this.headCenter.y - arrowRadius - this.arrowWidth / 2 + rate)\n        ctx.lineTo(this.headCenter.x + this.arrowWidth * 2 - rate * 2, this.headCenter.y - arrowRadius + this.arrowWidth / 2)\n\n        ctx.lineTo(this.headCenter.x, this.headCenter.y - arrowRadius + this.arrowWidth * 3 / 2 - rate)\n\n        ctx.fillStyle = 'rgb(255,255,255)'\n        ctx.fill()\n        ctx.strokeStyle = 'rgb(170,170,170)'\n        ctx.stroke()\n        ctx.restore()\n      }\n    },\n    watch: {\n      y() {\n        this._draw()\n      }\n    }\n  }\n</script>\n"],"sourceRoot":"node_modules/cube-ui/src/components/bubble"}]}